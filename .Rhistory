X <- runif(10, 0, 1)
Y <- rbinom(10, 1, 0.2)
m = monotoneBayes(X, Y)
1/10
usethis::use_vignette()
usethis::use_vignette()
usethis::use_vignette(intro)
usethis::use_vignette("intro")
devtools
devtools::build_vignettes()
browseVignettes("MonotoneBayes")
library(MonotoneBayes)
set.seed(108)
data = matrix(0, nrow = N, ncol = 5)
N = 50
L = 10
set.seed(108)
data = matrix(0, nrow = N, ncol = 5)
data[,"x"] = runif(N, 0, 1)
trueP = c(0,0.2,0.5,0.8,1)
set.seed(108)
trueP = c(0,0.2,0.5,0.8,1)
data = matrix(0, nrow = N, ncol = length(trueP)+1)
data[,1] = runif(N, 0, 1)
for (i in 1:length(trueP)){
data[,i+1] = rbinom(N,1,prob = trueP[i])
}
c("x",paste(m,1:5,sep = ""))
c("x",paste("m",1:5,sep = ""))
colnames(data) = c("x",paste("m",1:5,sep = ""))
?monotoneBayes
model1 = monotoneBayes(data[,"x"], data[,"m1"])
model2 = monotoneBayes(data[,"x"], data[,"m2"])
rs1 = sumStats(model1, ndigit = 3)
rs2 = sumStats(model2, ndigit = 3)
View(rs1)
sumStats = function(model, AllPara = F, ndigit = 3, orgHS = F){ # find the posterior distribution of Gamma, IntAlpha, alpha , lambda, and inte
if (AllPara == T){
if (orgHS == T){ # then no c_sq parameter
outcome = round(rstan::summary(model, pars =c("gamma","tau_sq","alpha","lambda_sq"))$summary, ndigit)
} else {
outcome = round(rstan::summary(model, pars =c("gamma","c_sq","tau_sq", "alpha","lambda_sq"))$summary, ndigit)
}
} else {
outcome.sum = round(rstan::summary(model, probs = c(0.5, 0.05, 0.25, 0.75, 0.95), pars =c("gamma", "alpha"))$summary, ndigit)
outcome = rbind(outcome.sum[1,], 0, outcome.sum[-1,])
outcome[2,] = colSums(outcome.sum[-1,])
outcome[2,c(2,3,5:10)] = NA
rownames(outcome)[1:2] = c("gamma","IntAlpha")
}
return(outcome)
}
View(rs2)
View(rs1)
View(rs2)
rstan::summary(model1, probs = c(0.5, 0.05, 0.25, 0.75, 0.95), pars =c("gamma", "alpha"))$summary
model3 = monotoneBayes(data[,"x"], data[,"m3"])
model3 = monotoneBayes(data[,"x"], data[,"m3"])
model4 = monotoneBayes(data[,"x"], data[,"m4"])
model5 = monotoneBayes(data[,"x"], data[,"m5"])
rs3 = sumStats(model3, ndigit = 3)
rs4 = sumStats(model4, ndigit = 3)
rs5 = sumStats(model5, ndigit = 3)
View(rs4)
View(rs5)
plotModel(model3,L=10,method = "median")
monotoneBayes = function(X, Y, L = 10, tau0 = 1e-4,
c_sq = 10^2, fix = F,
c_alpha = 0.01, c_beta = 0.01 * 4, prior = "Regularized HS", ...){
N = length(Y)
data.L = X %/% (1/L) + 1
dt.stan = list(Y=Y, X = X, J = data.L,  L=L, N=N,
local_dof_stan = 1,
global_dof_stan = 1,
tau0_sq = tau0^2)
if (prior == "Original HS"){
model = rstan::sampling(stanmodels$OrgHS, data = dt.stan, ...)
} else if (prior == "Laplacian"){
model = "Laplacian ... TBD..."
} else if (prior == "Gaussian ... TBD..."){
model = "Gaussian"
} else {
if (fix == T) {
dt.stan$c_sq = c_sq
model = rstan::sampling(stanmodels$RegHSfix, data = dt.stan, ...)
} else {
dt.stan$c_sq_shape = c_alpha
dt.stan$c_sq_scale = c_beta
model = rstan::sampling(stanmodels$RegHS, data = dt.stan)
}
}
return(model)
}
model.test = monotoneBayes(data[,"x"], data[,"m5"], niter =5000)
devtools::load_all(".")
pkgbuild::compile_dll()
devtools::clean_dll()
pkgbuild::compile_dll()
stanmodels
model.test = monotoneBayes(data[,"x"], data[,"m5"], niter =5000)
model.test = monotoneBayes(data[,"x"], data[,"m5"], iter = 5000, warmup = 3000)
model.test = monotoneBayes(data[,"x"], data[,"m5"], iter = 5000, warmup = 2500)
install.packages("MonotoneBayes", source = T)
install.packages("MonotoneBayes", source = T)
install.packages("MonotoneBayes", source = T)
install.packages("MonotoneBayes", source = T)
install.packages("../MonotoneBayes", repos = NULL, type = "source")
install.packages("MonotoneBayes", source = T)
install.packages("MonotoneBayes", source = T)
install.packages("MonotoneBayes", source = T)
install.packages("../MonotoneBayes", repos = NULL, type = "source")
model.test = monotoneBayes(data[,"x"], data[,"m5"], iter = 5000, warmup = 2500)
library(MonotoneBayes)
model.test = monotoneBayes(data[,"x"], data[,"m5"], iter = 5000, warmup = 2500)
library(MonotoneBayes)
model.test = monotoneBayes(data[,"x"], data[,"m5"], iter = 5000, warmup = 2500)
library(MonotoneBayes)
N = 50
L = 10
trueP = c(0,0.2,0.5,0.8,1)
data = matrix(0, nrow = N, ncol = length(trueP)+1)
data[,1] = runif(N, 0, 1)
for (i in 1:length(trueP)){
data[,i+1] = rbinom(N,1,prob = trueP[i])
}
colnames(data) = c("x",paste("m",1:5,sep = ""))
model1 = monotoneBayes(data[,"x"], data[,"m1"])
model.test = monotoneBayes(data[,"x"], data[,"m4"], iter = 5000, warmup = 2500)
rs3 = sumStats(model3, ndigit = 3)
rs4 = sumStats(model4, ndigit = 3)
rs5 = sumStats(model5, ndigit = 3)
rs.tst = sumStats(model.test, ndigit = 3)
View(rs.tst)
print(model.test)
summary(model.test)
rstan::summary(model.test)
install.packages("../MonotoneBayes", repos = NULL, type = "source")
library(MonotoneBayes)
library(MonotoneBayes)
N = 50
set.seed(108)
trueP = c(0,0.2,0.5,0.8,1)
data[,1] = runif(N, 0, 1)
for (i in 1:length(trueP)){
data[,i+1] = rbinom(N,1,prob = trueP[i])
}
N = 50
L = 10
set.seed(108)
trueP = c(0,0.2,0.5,0.8,1)
data = matrix(0, nrow = N, ncol = length(trueP)+1)
data[,1] = runif(N, 0, 1)
for (i in 1:length(trueP)){
data[,i+1] = rbinom(N,1,prob = trueP[i])
}
colnames(data) = c("x",paste("m",1:5,sep = ""))
rs3 = sumStats(model3, ndigit = 3, iter = 5000)
model3 = monotoneBayes(data[,"x"], data[,"m3"], iter = 5000)
model3 = monotoneBayes(data[,"x"], data[,"m3"], warmup = 5000)
model3.hs = monotoneBayes(data[,"x"], data[,"m3"], warmup = 5000, prior = "Original HS")
model3.hs = monotoneBayes(data[,"x"], data[,"m3"], prior = "Original HS", iter = 5000))
model3.hs = monotoneBayes(data[,"x"], data[,"m3"], prior = "Original HS")
model3.hs = monotoneBayes(data[,"x"], data[,"m3"], prior = "Original HS", iter = 5000)
data[,1] = seq(0,1,length.out=50)
N = 50
L = 10
set.seed(108)
trueP = c(0,0.2,0.5,0.8,1)
data = matrix(0, nrow = N, ncol = length(trueP)+1)
data[,1] = seq(0,1,length.out=N)
data = matrix(0, nrow = N, ncol = length(trueP)+3)
for (i in 1:length(trueP)){
data[,i+1] = rbinom(N,1,prob = trueP[i])
}
plot(data[,1],data[,2])
data[,2]
data[,1]
data[,1] = seq(0,1,length.out=N)
for (i in 1:length(trueP)){
data[,i+1] = rbinom(N,1,prob = trueP[i])
}
plot(data[,1],data[,2])
plot(data[,1],data[,3])
plot(data[,1],data[,4])
plot(data[,1],data[,5])
colnames(data) = c("x",paste("m",1:5,sep = ""))
colnames(data)[1:6] = c("x",paste("m",1:5,sep = ""))
c("x",paste("m",1:5,sep = ""))
colnames(data)[1:6] = c("x",paste("m",1:5,sep = ""))
colnames(data)[1:6]
colnames(data)
data = matrix(0, nrow = N, ncol = length(trueP)+3)
for (i in 1:length(trueP)){
data[,i+1] = rbinom(N,1,prob = trueP[i])
}
colnames(data)[1:6] = c("x",paste("m",1:5,sep = ""))
colnames(data)
colnames(data) = c("x",paste("m",1:7,sep = ""))
head(data)
generateData = function(N, L=10, ratio = 0.1){
# ratio means
data = matrix(0 ,nrow = N, ncol = 5)
colnames(data) = c("x","m1","m2", "m3", "L10")
data = as.data.frame(data)
data$x = seq(0,1,length.out = N)
data$L10 = data$x %/% (1/L) + 1
data$m1[1:(N/2)] = 0
data$m1[(N/2+1):N] = 1
data$m2 =
data$m3 = data$m1
ratio = ratio # 5%-10%
rind_m2 = sample(1:(N/2), size = ceiling(N/2*ratio))
rind_m3 = sample((N/2+1):N, size = ceiling(N/2*ratio))
data$m2[rind_m2] = 1
data$m3[rind_m3] = 0
return(data)
}
options(mc.cores = parallel::detectCores()) # for local use
N = 50
set.seed(699)
data = generateData(N)
??monotoneBayes
# A demo script to plots model fitting comparing different method:
# methods: Regularized HS (par 1 - par 2); orginal HS; HS with C fixed at certain value
library(MonotoneBayes)
library(ggplot2)
generateData = function(N, L=10, ratio = 0.1){
# ratio means
data = matrix(0 ,nrow = N, ncol = 5)
colnames(data) = c("x","m1","m2", "m3", "L10")
data = as.data.frame(data)
data$x = seq(0,1,length.out = N)
data$L10 = data$x %/% (1/L) + 1
data$m1[1:(N/2)] = 0
data$m1[(N/2+1):N] = 1
data$m2 =
data$m3 = data$m1
ratio = ratio # 5%-10%
rind_m2 = sample(1:(N/2), size = ceiling(N/2*ratio))
rind_m3 = sample((N/2+1):N, size = ceiling(N/2*ratio))
data$m2[rind_m2] = 1
data$m3[rind_m3] = 0
return(data)
}
options(mc.cores = parallel::detectCores()) # for local use
N = 50
set.seed(699)
data = generateData(N)
c_sq_shape = 0.01
c_sq_scale = 0.01 * 4
tau0 = 1e-4
which_outcome = "m1"
model.orgHS = monotoneBayes(X = data[,"x"], Y = data[,which_outcome], prior = "Original HS", tau0 = tau0)
model.regHS = monotoneBayes(X = data[,"x"], Y = data[,which_outcome], prior = "Regularized HS", tau0 = tau0, c_alpha = c_sq_shape, c_beta = c_sq_scale)
model.fixC = monotoneBayes(X = data[,"x"], Y = data[,which_outcome], prior = "Regularized HS", tau0 = tau0, fix = T, c_sq = 10^2)
# Check the posterior distribution of fitted model on Estimated Gamma and the IntergalAlpha
# Each outcome.XX store the posterior mean/median(50%), quantitles (0.1,0.25,0.75,0.9)
outcome.orgHS = sumStats(model.orgHS, ndigit = 3, orgHS = T)
outcome.regHS = sumStats(model.regHS, ndigit = 3)
outcome.fixC = sumStats(model.fixC, ndigit = 3)
View(model.orgHS)
View(outcome.fixC)
View(outcome.regHS)
View(outcome.orgHS)
View(outcome.fixC)
View(outcome.orgHS)
View(outcome.regHS)
# Below the method can be posterior "mean" or "median"
# Since the posterior 50% == 70%, I use median here
dt.outcome = data.frame("x" = data$x,
"OrgHS" = (plotModel(model.orgHS, method = "median")$FittedProb)$EstPr.Y,
"RegHS" = (plotModel(model.regHS, method = "median")$FittedProb)$EstPr.Y,
"RegHS.fixC" = (plotModel(model.regHS, method = "median")$FittedProb)$EstPr.Y)
# Below the method can be posterior "mean" or "median"
# Since the posterior 50% == 70%, I use median here
dt.outcome = data.frame("x" = data$x,
"OrgHS" = (plotModel(model.orgHS, L = L, method = "median")$FittedProb)$EstPr.Y,
"RegHS" = (plotModel(model.regHS, L = L, method = "median")$FittedProb)$EstPr.Y,
"RegHS.fixC" = (plotModel(model.regHS, L = L, method = "median")$FittedProb)$EstPr.Y)
L = 10
# Below the method can be posterior "mean" or "median"
# Since the posterior 50% == 70%, I use median here
dt.outcome = data.frame("x" = data$x,
"OrgHS" = (plotModel(model.orgHS, L = L, method = "median")$FittedProb)$EstPr.Y,
"RegHS" = (plotModel(model.regHS, L = L, method = "median")$FittedProb)$EstPr.Y,
"RegHS.fixC" = (plotModel(model.regHS, L = L, method = "median")$FittedProb)$EstPr.Y)
dt.outcome %>% melt(id.vars = "x") %>% ggplot() +
geom_line(aes(x = x, y = value, color = variable)) +
geom_point(data = data, aes(x = x, y = get(which_outcome)), alpha = 0.2) +
ylim(0,1)
library(dplyr)
dt.outcome %>% melt(id.vars = "x") %>% ggplot() +
geom_line(aes(x = x, y = value, color = variable)) +
geom_point(data = data, aes(x = x, y = get(which_outcome)), alpha = 0.2) +
ylim(0,1)
library(ggplot2)
library(reshape2)
library(dplyr)
dt.outcome %>% melt(id.vars = "x") %>% ggplot() +
geom_line(aes(x = x, y = value, color = variable)) +
geom_point(data = data, aes(x = x, y = get(which_outcome)), alpha = 0.2) +
ylim(0,1)
plotModel(model.orgHS, L = L, method = "median")
plotModel(model.orgHS, L = L, method = "mean"
)
# Below the method can be posterior "mean" or "median"
# Since the posterior 50% == 70%, I use median here
dt.outcome = data.frame("x" = data$x,
"OrgHS" = (plotModel(model.orgHS, L = L, method = "mean")$FittedProb)$EstPr.Y,
"RegHS" = (plotModel(model.regHS, L = L, method = "mean")$FittedProb)$EstPr.Y,
"RegHS.fixC" = (plotModel(model.regHS, L = L, method = "mean")$FittedProb)$EstPr.Y)
dt.outcome %>% melt(id.vars = "x") %>% ggplot() +
geom_line(aes(x = x, y = value, color = variable)) +
geom_point(data = data, aes(x = x, y = get(which_outcome)), alpha = 0.2) +
ylim(0,1)
# Below the method can be posterior "mean" or "median", median seems perform terrible.
dt.outcome = data.frame("x" = data$x,
"OrgHS" = (plotModel(model.orgHS, L = L, method = "mean")$FittedProb)$EstPr.Y,
"RegHS" = (plotModel(model.regHS, L = L, method = "mean")$FittedProb)$EstPr.Y,
"RegHS.fixC" = (plotModel(model.regHS, L = L, method = "mean")$FittedProb)$EstPr.Y)
(plotModel(model.orgHS, L = L, method = "mean")$Curve)
(plotModel(model.regHS, L = L, method = "mean")$Curve)
(plotModel(model.fixC, L = L, method = "mean")$Curve)
dt.outcome %>% melt(id.vars = "x") %>% ggplot() +
geom_line(aes(x = x, y = value, color = variable))
dt.outcome %>% melt(id.vars = "x")
dt.outcome$x
plot(dt.outcome$x,dt.outcome$OrgHS)
plot((plotModel(model.orgHS, L = L, method = "mean")$FittedProb)$EstPr.Y)
plot((plotModel(model.regHS, L = L, method = "mean")$FittedProb)$EstPr.Y)
# Below the method can be posterior "mean" or "median", median seems perform terrible.
dt.outcome = data.frame("x" = (plotModel(model.orgHS, L = L, method = "mean")$FittedProb)$x,
"OrgHS" = (plotModel(model.orgHS, L = L, method = "mean")$FittedProb)$EstPr.Y,
"RegHS" = (plotModel(model.regHS, L = L, method = "mean")$FittedProb)$EstPr.Y,
"RegHS.fixC" = (plotModel(model.regHS, L = L, method = "mean")$FittedProb)$EstPr.Y)
dt.outcome %>% melt(id.vars = "x") %>% ggplot() +
geom_line(aes(x = x, y = value, color = variable)) +
geom_point(data = data, aes(x = x, y = get(which_outcome)), alpha = 0.2) +
ylim(0,1)
plot((plotModel(model.regHS, L = L, method = "mean")$FittedProb)$EstPr.Y))
plot(plotModel(model.regHS, L = L, method = "mean")$FittedProb)$EstPr.Y))
plot(plotModel(model.regHS, L = L, method = "mean")$FittedProb)$EstPr.Y)
plot((plotModel(model.regHS, L = L, method = "mean")$FittedProb)$EstPr.Y)
# Below the method can be posterior "mean" or "median", median seems perform terrible.
dt.outcome = data.frame("x" = (plotModel(model.orgHS, L = L, method = "mean")$FittedProb)$x,
"OrgHS" = (plotModel(model.orgHS, L = L, method = "mean")$FittedProb)$EstPr.Y,
"RegHS" = (plotModel(model.regHS, L = L, method = "mean")$FittedProb)$EstPr.Y,
"RegHS.fixC" = (plotModel(model.fixC, L = L, method = "mean")$FittedProb)$EstPr.Y)
dt.outcome %>% melt(id.vars = "x") %>% ggplot() +
geom_line(aes(x = x, y = value, color = variable)) +
geom_point(data = data, aes(x = x, y = get(which_outcome)), alpha = 0.2) +
ylim(0,1)
dt.outcome %>% melt(id.vars = "x") %>% ggplot() +
geom_line(aes(x = x, y = value, color = variable)) +
geom_point(data = data, aes(x = x, y = get(which_outcome)), alpha = 0.2) +
ylim(0,1) + ggtitle(paste("N=",N,",",which_outcome,",Tau0=",tau0))
dt.outcome %>% melt(id.vars = "x") %>% ggplot() +
geom_line(aes(x = x, y = value, color = variable)) +
geom_point(data = data, aes(x = x, y = get(which_outcome)), alpha = 0.2) +
ylim(0,1) + ggtitle(paste("N=",N,",",which_outcome,",Tau0=",tau0, sep = ""))
dt.outcome %>% melt(id.vars = "x") %>% ggplot() +
geom_line(aes(x = x, y = value, color = variable)) +
geom_point(data = data, aes(x = x, y = get(which_outcome)), alpha = 0.2) +
ylim(0,1) + ggtitle(paste("N=",N,", ",which_outcome,", Tau0=",tau0, sep = ""))
devtools::document()
save.image("../Outcome/SaveData/demoFitting.RData")
save.image("../Outcome/SaveData/demoFitting.rda")
save.image("../Outcome/SaveData/demoFitting.rda")
devtools::document()
browseVignettes("MonotoneBayes")
browseVignettes("MonotoneBayes")
devtools::document()
devtools::document()
devtools::build_vignettes()
pbeta(0.25,1,2)
install.packages("../MonotoneBayes", repos = NULL, type = "source")
pkgbuild::compile_dll()
.Last.error
monotoneBayes = function(X, Y, L = 10, tau0 = 1e-4,
c_sq = 10^2, fix = F,
c_alpha = 0.01, c_beta = 0.01 * 4, prior = "Regularized HS", ...){
N = length(Y)
data.L = X %/% (1/L) + 1
dt.stan = list(Y=Y, X = X, J = data.L,  L=L, N=N,
local_dof_stan = 1,
global_dof_stan = 1,
tau0_sq = tau0^2)
if (prior == "Original HS"){
model = rstan::sampling(stanmodels$OrgHS, data = dt.stan, ...)
} else if (prior == "Laplacian"){
model = "Laplacian ... TBD..."
} else if (prior == "Gaussian ... TBD..."){
model = "Gaussian"
} else {
if (fix == T) {
dt.stan$c_sq = c_sq
model = rstan::sampling(stanmodels$RegHSfix, data = dt.stan, ...)
} else {
dt.stan$c_sq_shape = c_alpha
dt.stan$c_sq_scale = c_beta
model = rstan::sampling(stanmodels$RegHS, data = dt.stan, ...)
}
}
return(model)
}
example(source)
roxygen2::roxygenize(load_code = sourceDir)
roxygen2::roxygenize(load_code = sourceDir, clean = T)
try(roxygen2::roxygenize(load_code = sourceDir), silent = TRUE)
roxygen2::roxygenize()
devtools::document()
.Last.error
remotes::install_github("xietian99/MonotoneBayes", ref = "master")
library(MonotoneBayes)
library(MonotoneBayes)
??`MonotoneBayes-package`
devtools::document()
devtools::document()
devtools::document()
example(source) #
try(roxygen2::roxygenize(load_code = sourceDir), silent = TRUE)
roxygen2::roxygenize()
try(roxygen2::roxygenize(load_code = sourceDir), silent = TRUE)
roxygen2::roxygenize()
devtools::document()
install.packages("../MonotoneBayes", repos = NULL, type = "source")
library(MonotoneBayes)
library(ggplot2)
library(reshape2)
library(dplyr)
generateData = function(N, L=10, ratio = 0.1){
# ratio means
data = matrix(0 ,nrow = N, ncol = 5)
colnames(data) = c("x","m1","m2", "m3", "L10")
data = as.data.frame(data)
data$x = seq(0,1,length.out = N)
data$L10 = data$x %/% (1/L) + 1
data$m1[1:(N/2)] = 0
data$m1[(N/2+1):N] = 1
data$m2 =
data$m3 = data$m1
ratio = ratio # 5%-10%
rind_m2 = sample(1:(N/2), size = ceiling(N/2*ratio))
rind_m3 = sample((N/2+1):N, size = ceiling(N/2*ratio))
data$m2[rind_m2] = 1
data$m3[rind_m3] = 0
return(data)
}
options(mc.cores = parallel::detectCores()) # for local use
N = 50
set.seed(699)
data = generateData(N)
# set hyper-parameter for regularized HS
c_sq_shape = 1
c_sq_scale = 1 * 4
tau0 = 1e-4
which_outcome = "m1"
L = 10
model.regHS = monotoneBayes(X = data[,"x"], Y = data[,which_outcome], prior = "Regularized HS",
L = L, tau0 = tau0, c_alpha = c_sq_shape, c_beta = c_sq_scale) # Running time: 4 chain 69s, 290s, 366s, 490s
model.orgHS = monotoneBayes(X = data[,"x"], Y = data[,which_outcome], prior = "Original HS",
L = L, tau0 = tau0)
# Check the posterior distribution of fitted model on Estimated Gamma and the IntergalAlpha
# Each outcome.XX store the posterior mean/median(50%), quantitles (0.1,0.25,0.75,0.9)
outcome.orgHS = sumStats(model.orgHS, ndigit = 3, orgHS = T)
outcome.regHS = sumStats(model.regHS, ndigit = 3)
View(model.regHS)
# Check the posterior distribution of fitted model on Estimated Gamma and the IntergalAlpha
# Each outcome.XX store the posterior mean/median(50%), quantitles (0.1,0.25,0.75,0.9)
outcome.orgHS = sumStats(model.orgHS, ndigit = 3, orgHS = T)
outcome.regHS = sumStats(model.regHS, ndigit = 3)
View(outcome.regHS)
View(outcome.orgHS)
plot(data$m1)
L
model.regHS.L25 = monotoneBayes(X = data[,"x"], Y = data[,which_outcome], prior = "Regularized HSp",
L = 25, tau0 = tau0, c_alpha = c_sq_shape, c_beta = c_sq_scale) # Running time: 4 chain 32s - 40s
outcome.regHS.L25 = sumStats(model.regHS.L25, ndigit = 3)
View(outcome.regHS.L25)
# Below the method can be posterior "mean" or "median", median seems perform terrible.
dt.outcome = data.frame("x" = (plotModel(model.orgHS, L = L, method = "mean")$FittedProb)$x,
"OrgHS" = (plotModel(model.orgHS, L = L, method = "mean")$FittedProb)$EstPr.Y,
"RegHS" = (plotModel(model.regHS, L = L, method = "mean")$FittedProb)$EstPr.Y,
"RegHS.L25" = (plotModel(model.regHS.L25, L = 25, method = "mean")$FittedProb)$EstPr.Y)
dt.outcome %>% melt(id.vars = "x") %>% ggplot() +
geom_line(aes(x = x, y = value, color = variable)) +
geom_point(data = data, aes(x = x, y = get(which_outcome)), alpha = 0.2) +
ylim(0,1) + ggtitle(paste("N=",N,", ",which_outcome,", Tau0=",tau0, sep = ""))
library(ggplot2)
library(reshape2)
library(dplyr)
dt.outcome %>% melt(id.vars = "x") %>% ggplot() +
geom_line(aes(x = x, y = value, color = variable)) +
geom_point(data = data, aes(x = x, y = get(which_outcome)), alpha = 0.2) +
ylim(0,1) + ggtitle(paste("N=",N,", ",which_outcome,", Tau0=",tau0, sep = ""))
library(ggplot2)
remove.packages("ggplot2")
library(ggplot2)
install.packages("ggplot2")
plot((plotModel(model.orgHS, L = L, method = "mean")$FittedProb)$EstPr.Y)
plot((plotModel(model.regHS, L = L, method = "mean")$FittedProb)$EstPr.Y)
plot((plotModel(model.regHS.L25, L = L, method = "mean")$FittedProb)$EstPr.Y)
plot((plotModel(model.regHS.L25, L = 25, method = "mean")$FittedProb)$EstPr.Y)
plot((plotModel(model.regHS, L = L, method = "mean")$FittedProb)$EstPr.Y)
plot((plotModel(model.regHS.L25, L = 25, method = "mean")$FittedProb)$EstPr.Y)
dt.outcome %>% melt(id.vars = "x") %>% ggplot() +
geom_line(aes(x = x, y = value, color = variable)) +
geom_point(data = data, ggplot::aes(x = x, y = get(which_outcome)), alpha = 0.2) +
ylim(0,1) + ggtitle(paste("N=",N,", ",which_outcome,", Tau0=",tau0, sep = ""))
?aes
??aes
save.image("../Outcome/preTest.RData")
