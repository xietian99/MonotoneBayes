// Generated by rstantools.  Do not edit by hand.

/*
    MonotoneBayes is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    MonotoneBayes is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with MonotoneBayes.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.26.1-4-gd72b68b7-dirty
#include <stan/model/model_header.hpp>
namespace model_RegHSfix_namespace {
inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math;
using stan::math::pow; 
stan::math::profile_map profiles__;
static int current_statement__= 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in 'RegHSfix', line 20, column 2 to column 36)",
                                                      " (in 'RegHSfix', line 23, column 2 to column 32)",
                                                      " (in 'RegHSfix', line 24, column 2 to column 33)",
                                                      " (in 'RegHSfix', line 26, column 2 to column 40)",
                                                      " (in 'RegHSfix', line 27, column 2 to column 41)",
                                                      " (in 'RegHSfix', line 29, column 2 to column 26)",
                                                      " (in 'RegHSfix', line 33, column 2 to column 31)",
                                                      " (in 'RegHSfix', line 34, column 2 to column 39)",
                                                      " (in 'RegHSfix', line 36, column 2 to column 31)",
                                                      " (in 'RegHSfix', line 37, column 2 to column 27)",
                                                      " (in 'RegHSfix', line 38, column 2 to column 35)",
                                                      " (in 'RegHSfix', line 39, column 2 to column 32)",
                                                      " (in 'RegHSfix', line 41, column 2 to column 43)",
                                                      " (in 'RegHSfix', line 43, column 2 to column 40)",
                                                      " (in 'RegHSfix', line 45, column 2 to column 38)",
                                                      " (in 'RegHSfix', line 46, column 2 to column 48)",
                                                      " (in 'RegHSfix', line 48, column 4 to column 72)",
                                                      " (in 'RegHSfix', line 47, column 16 to line 49, column 3)",
                                                      " (in 'RegHSfix', line 47, column 2 to line 49, column 3)",
                                                      " (in 'RegHSfix', line 50, column 2 to column 30)",
                                                      " (in 'RegHSfix', line 51, column 2 to column 42)",
                                                      " (in 'RegHSfix', line 52, column 2 to column 43)",
                                                      " (in 'RegHSfix', line 57, column 6 to column 95)",
                                                      " (in 'RegHSfix', line 55, column 6 to column 53)",
                                                      " (in 'RegHSfix', line 54, column 4 to line 57, column 95)",
                                                      " (in 'RegHSfix', line 53, column 16 to line 58, column 3)",
                                                      " (in 'RegHSfix', line 53, column 2 to line 58, column 3)",
                                                      " (in 'RegHSfix', line 59, column 2 to column 26)",
                                                      " (in 'RegHSfix', line 61, column 4 to column 52)",
                                                      " (in 'RegHSfix', line 60, column 20 to line 62, column 3)",
                                                      " (in 'RegHSfix', line 60, column 2 to line 62, column 3)",
                                                      " (in 'RegHSfix', line 67, column 2 to column 32)",
                                                      " (in 'RegHSfix', line 68, column 2 to column 32)",
                                                      " (in 'RegHSfix', line 69, column 2 to column 69)",
                                                      " (in 'RegHSfix', line 70, column 2 to column 35)",
                                                      " (in 'RegHSfix', line 71, column 2 to column 70)",
                                                      " (in 'RegHSfix', line 74, column 4 to column 27)",
                                                      " (in 'RegHSfix', line 73, column 17 to line 75, column 3)",
                                                      " (in 'RegHSfix', line 73, column 2 to line 75, column 3)",
                                                      " (in 'RegHSfix', line 3, column 2 to column 17)",
                                                      " (in 'RegHSfix', line 4, column 2 to column 17)",
                                                      " (in 'RegHSfix', line 5, column 31 to column 34)",
                                                      " (in 'RegHSfix', line 5, column 2 to column 42)",
                                                      " (in 'RegHSfix', line 6, column 31 to column 32)",
                                                      " (in 'RegHSfix', line 6, column 2 to column 36)",
                                                      " (in 'RegHSfix', line 7, column 30 to column 31)",
                                                      " (in 'RegHSfix', line 7, column 2 to column 33)",
                                                      " (in 'RegHSfix', line 8, column 31 to column 32)",
                                                      " (in 'RegHSfix', line 8, column 2 to column 36)",
                                                      " (in 'RegHSfix', line 9, column 30 to column 31)",
                                                      " (in 'RegHSfix', line 9, column 2 to column 33)",
                                                      " (in 'RegHSfix', line 11, column 2 to column 25)",
                                                      " (in 'RegHSfix', line 12, column 2 to column 35)",
                                                      " (in 'RegHSfix', line 13, column 2 to column 36)",
                                                      " (in 'RegHSfix', line 14, column 2 to column 28)",
                                                      " (in 'RegHSfix', line 20, column 22 to column 23)",
                                                      " (in 'RegHSfix', line 26, column 22 to column 23)",
                                                      " (in 'RegHSfix', line 27, column 22 to column 23)",
                                                      " (in 'RegHSfix', line 33, column 22 to column 23)",
                                                      " (in 'RegHSfix', line 34, column 22 to column 23)",
                                                      " (in 'RegHSfix', line 36, column 22 to column 23)",
                                                      " (in 'RegHSfix', line 38, column 22 to column 23)",
                                                      " (in 'RegHSfix', line 41, column 35 to column 38)",
                                                      " (in 'RegHSfix', line 43, column 35 to column 36)"};
#include <stan_meta_header.hpp>
class model_RegHSfix final : public model_base_crtp<model_RegHSfix> {
private:
  int N;
  int L;
  Eigen::Matrix<double, -1, 1> nodes;
  Eigen::Matrix<double, -1, 1> W;
  std::vector<int> Y;
  Eigen::Matrix<double, -1, 1> X;
  std::vector<int> J;
  double c_sq;
  double local_dof_stan;
  double global_dof_stan;
  double tau0_sq;
  int xi_1dim__;
 
public:
  ~model_RegHSfix() { }
  
  inline std::string model_name() const final { return "model_RegHSfix"; }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.26.1-4-gd72b68b7-dirty", "stancflags = "};
  }
  
  
  model_RegHSfix(stan::io::var_context& context__,
                 unsigned int random_seed__ = 0,
                 std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "model_RegHSfix_namespace::model_RegHSfix";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 40;
      context__.validate_dims("data initialization","N","int",
          context__.to_vec());
      N = std::numeric_limits<int>::min();
      
      current_statement__ = 40;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 40;
      current_statement__ = 40;
      check_greater_or_equal(function__, "N", N, 0);
      current_statement__ = 41;
      context__.validate_dims("data initialization","L","int",
          context__.to_vec());
      L = std::numeric_limits<int>::min();
      
      current_statement__ = 41;
      L = context__.vals_i("L")[(1 - 1)];
      current_statement__ = 41;
      current_statement__ = 41;
      check_greater_or_equal(function__, "L", L, 1);
      current_statement__ = 42;
      validate_non_negative_index("nodes", "L + 1", (L + 1));
      current_statement__ = 43;
      context__.validate_dims("data initialization","nodes","double",
          context__.to_vec((L + 1)));
      nodes = Eigen::Matrix<double, -1, 1>((L + 1));
      stan::math::fill(nodes, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> nodes_flat__;
        current_statement__ = 43;
        assign(nodes_flat__, nil_index_list(), context__.vals_r("nodes"),
          "assigning variable nodes_flat__");
        current_statement__ = 43;
        pos__ = 1;
        current_statement__ = 43;
        for (int sym1__ = 1; sym1__ <= (L + 1); ++sym1__) {
          current_statement__ = 43;
          assign(nodes, cons_list(index_uni(sym1__), nil_index_list()),
            nodes_flat__[(pos__ - 1)], "assigning variable nodes");
          current_statement__ = 43;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 43;
      for (int sym1__ = 1; sym1__ <= (L + 1); ++sym1__) {
        current_statement__ = 43;
        current_statement__ = 43;
        check_greater_or_equal(function__, "nodes[sym1__]",
                               nodes[(sym1__ - 1)], 0.0);}
      current_statement__ = 43;
      for (int sym1__ = 1; sym1__ <= (L + 1); ++sym1__) {
        current_statement__ = 43;
        current_statement__ = 43;
        check_less_or_equal(function__, "nodes[sym1__]", nodes[(sym1__ - 1)],
                            1.0);}
      current_statement__ = 44;
      validate_non_negative_index("W", "L", L);
      current_statement__ = 45;
      context__.validate_dims("data initialization","W","double",
          context__.to_vec(L));
      W = Eigen::Matrix<double, -1, 1>(L);
      stan::math::fill(W, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> W_flat__;
        current_statement__ = 45;
        assign(W_flat__, nil_index_list(), context__.vals_r("W"),
          "assigning variable W_flat__");
        current_statement__ = 45;
        pos__ = 1;
        current_statement__ = 45;
        for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
          current_statement__ = 45;
          assign(W, cons_list(index_uni(sym1__), nil_index_list()),
            W_flat__[(pos__ - 1)], "assigning variable W");
          current_statement__ = 45;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 45;
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        current_statement__ = 45;
        current_statement__ = 45;
        check_greater_or_equal(function__, "W[sym1__]", W[(sym1__ - 1)], 0.0);
      }
      current_statement__ = 45;
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        current_statement__ = 45;
        current_statement__ = 45;
        check_less_or_equal(function__, "W[sym1__]", W[(sym1__ - 1)], 1.0);}
      current_statement__ = 46;
      validate_non_negative_index("Y", "N", N);
      current_statement__ = 47;
      context__.validate_dims("data initialization","Y","int",
          context__.to_vec(N));
      Y = std::vector<int>(N, std::numeric_limits<int>::min());
      
      current_statement__ = 47;
      assign(Y, nil_index_list(), context__.vals_i("Y"),
        "assigning variable Y");
      current_statement__ = 47;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 47;
        current_statement__ = 47;
        check_greater_or_equal(function__, "Y[sym1__]", Y[(sym1__ - 1)], 0);}
      current_statement__ = 47;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 47;
        current_statement__ = 47;
        check_less_or_equal(function__, "Y[sym1__]", Y[(sym1__ - 1)], 1);}
      current_statement__ = 48;
      validate_non_negative_index("X", "N", N);
      current_statement__ = 49;
      context__.validate_dims("data initialization","X","double",
          context__.to_vec(N));
      X = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(X, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> X_flat__;
        current_statement__ = 49;
        assign(X_flat__, nil_index_list(), context__.vals_r("X"),
          "assigning variable X_flat__");
        current_statement__ = 49;
        pos__ = 1;
        current_statement__ = 49;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 49;
          assign(X, cons_list(index_uni(sym1__), nil_index_list()),
            X_flat__[(pos__ - 1)], "assigning variable X");
          current_statement__ = 49;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 49;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 49;
        current_statement__ = 49;
        check_greater_or_equal(function__, "X[sym1__]", X[(sym1__ - 1)], 0.0);
      }
      current_statement__ = 49;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 49;
        current_statement__ = 49;
        check_less_or_equal(function__, "X[sym1__]", X[(sym1__ - 1)], 1.0);}
      current_statement__ = 50;
      validate_non_negative_index("J", "N", N);
      current_statement__ = 51;
      context__.validate_dims("data initialization","J","int",
          context__.to_vec(N));
      J = std::vector<int>(N, std::numeric_limits<int>::min());
      
      current_statement__ = 51;
      assign(J, nil_index_list(), context__.vals_i("J"),
        "assigning variable J");
      current_statement__ = 51;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 51;
        current_statement__ = 51;
        check_greater_or_equal(function__, "J[sym1__]", J[(sym1__ - 1)], 1);}
      current_statement__ = 51;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 51;
        current_statement__ = 51;
        check_less_or_equal(function__, "J[sym1__]", J[(sym1__ - 1)], L);}
      current_statement__ = 52;
      context__.validate_dims("data initialization","c_sq","double",
          context__.to_vec());
      c_sq = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 52;
      c_sq = context__.vals_r("c_sq")[(1 - 1)];
      current_statement__ = 52;
      current_statement__ = 52;
      check_greater_or_equal(function__, "c_sq", c_sq, 0.0);
      current_statement__ = 53;
      context__.validate_dims("data initialization","local_dof_stan",
          "double",context__.to_vec());
      local_dof_stan = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 53;
      local_dof_stan = context__.vals_r("local_dof_stan")[(1 - 1)];
      current_statement__ = 53;
      current_statement__ = 53;
      check_greater_or_equal(function__, "local_dof_stan", local_dof_stan,
                             0.0);
      current_statement__ = 54;
      context__.validate_dims("data initialization","global_dof_stan",
          "double",context__.to_vec());
      global_dof_stan = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 54;
      global_dof_stan = context__.vals_r("global_dof_stan")[(1 - 1)];
      current_statement__ = 54;
      current_statement__ = 54;
      check_greater_or_equal(function__, "global_dof_stan", global_dof_stan,
                             0.0);
      current_statement__ = 55;
      context__.validate_dims("data initialization","tau0_sq","double",
          context__.to_vec());
      tau0_sq = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 55;
      tau0_sq = context__.vals_r("tau0_sq")[(1 - 1)];
      current_statement__ = 55;
      current_statement__ = 55;
      check_greater_or_equal(function__, "tau0_sq", tau0_sq, 0.0);
      current_statement__ = 56;
      validate_non_negative_index("alpha_base", "L", L);
      current_statement__ = 57;
      validate_non_negative_index("lambda_base_sq", "L", L);
      current_statement__ = 58;
      validate_non_negative_index("lambda_scale_sq", "L", L);
      current_statement__ = 59;
      validate_non_negative_index("alpha", "L", L);
      current_statement__ = 60;
      validate_non_negative_index("cumsum_alphaW", "L", L);
      current_statement__ = 61;
      validate_non_negative_index("theta", "L", L);
      current_statement__ = 62;
      validate_non_negative_index("lambda_sq", "L", L);
      current_statement__ = 63;
      xi_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 63;
      xi_1dim__ = (L + 1);
      current_statement__ = 63;
      validate_non_negative_index("xi", "L + 1", xi_1dim__);
      current_statement__ = 64;
      validate_non_negative_index("p", "N", N);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += L;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += L;
      num_params_r__ += L;
      num_params_r__ += 1;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI, stan::require_vector_like_t<VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "model_RegHSfix_namespace::log_prob";
(void) function__;  // suppress unused var warning
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<local_scalar_t__, -1, 1> alpha_base;
      alpha_base = Eigen::Matrix<local_scalar_t__, -1, 1>(L);
      stan::math::fill(alpha_base, DUMMY_VAR__);
      
      current_statement__ = 1;
      alpha_base = in__.vector(L);
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        current_statement__ = 1;
        if (jacobian__) {
          current_statement__ = 1;
          assign(alpha_base, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(alpha_base[(sym1__ - 1)], 0.0, lp__),
            "assigning variable alpha_base");
        } else {
          current_statement__ = 1;
          assign(alpha_base, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(alpha_base[(sym1__ - 1)], 0.0),
            "assigning variable alpha_base");
        }}
      local_scalar_t__ tau_base_sq;
      tau_base_sq = DUMMY_VAR__;
      
      current_statement__ = 2;
      tau_base_sq = in__.scalar();
      current_statement__ = 2;
      if (jacobian__) {
        current_statement__ = 2;
        tau_base_sq = stan::math::lb_constrain(tau_base_sq, 0.0, lp__);
      } else {
        current_statement__ = 2;
        tau_base_sq = stan::math::lb_constrain(tau_base_sq, 0.0);
      }
      local_scalar_t__ tau_scale_sq;
      tau_scale_sq = DUMMY_VAR__;
      
      current_statement__ = 3;
      tau_scale_sq = in__.scalar();
      current_statement__ = 3;
      if (jacobian__) {
        current_statement__ = 3;
        tau_scale_sq = stan::math::lb_constrain(tau_scale_sq, 0.0, lp__);
      } else {
        current_statement__ = 3;
        tau_scale_sq = stan::math::lb_constrain(tau_scale_sq, 0.0);
      }
      Eigen::Matrix<local_scalar_t__, -1, 1> lambda_base_sq;
      lambda_base_sq = Eigen::Matrix<local_scalar_t__, -1, 1>(L);
      stan::math::fill(lambda_base_sq, DUMMY_VAR__);
      
      current_statement__ = 4;
      lambda_base_sq = in__.vector(L);
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        current_statement__ = 4;
        if (jacobian__) {
          current_statement__ = 4;
          assign(lambda_base_sq,
            cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(lambda_base_sq[(sym1__ - 1)], 0.0, lp__),
            "assigning variable lambda_base_sq");
        } else {
          current_statement__ = 4;
          assign(lambda_base_sq,
            cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(lambda_base_sq[(sym1__ - 1)], 0.0),
            "assigning variable lambda_base_sq");
        }}
      Eigen::Matrix<local_scalar_t__, -1, 1> lambda_scale_sq;
      lambda_scale_sq = Eigen::Matrix<local_scalar_t__, -1, 1>(L);
      stan::math::fill(lambda_scale_sq, DUMMY_VAR__);
      
      current_statement__ = 5;
      lambda_scale_sq = in__.vector(L);
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        current_statement__ = 5;
        if (jacobian__) {
          current_statement__ = 5;
          assign(lambda_scale_sq,
            cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(lambda_scale_sq[(sym1__ - 1)], 0.0, lp__),
            "assigning variable lambda_scale_sq");
        } else {
          current_statement__ = 5;
          assign(lambda_scale_sq,
            cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(lambda_scale_sq[(sym1__ - 1)], 0.0),
            "assigning variable lambda_scale_sq");
        }}
      local_scalar_t__ gamma;
      gamma = DUMMY_VAR__;
      
      current_statement__ = 6;
      gamma = in__.scalar();
      current_statement__ = 6;
      if (jacobian__) {
        current_statement__ = 6;
        gamma = stan::math::lb_constrain(gamma, 0.0, lp__);
      } else {
        current_statement__ = 6;
        gamma = stan::math::lb_constrain(gamma, 0.0);
      }
      Eigen::Matrix<local_scalar_t__, -1, 1> alpha;
      alpha = Eigen::Matrix<local_scalar_t__, -1, 1>(L);
      stan::math::fill(alpha, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> cumsum_alphaW;
      cumsum_alphaW = Eigen::Matrix<local_scalar_t__, -1, 1>(L);
      stan::math::fill(cumsum_alphaW, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> theta;
      theta = Eigen::Matrix<local_scalar_t__, -1, 1>(L);
      stan::math::fill(theta, DUMMY_VAR__);
      
      local_scalar_t__ tau_sq;
      tau_sq = DUMMY_VAR__;
      
      Eigen::Matrix<local_scalar_t__, -1, 1> lambda_sq;
      lambda_sq = Eigen::Matrix<local_scalar_t__, -1, 1>(L);
      stan::math::fill(lambda_sq, DUMMY_VAR__);
      
      local_scalar_t__ denominator;
      denominator = DUMMY_VAR__;
      
      Eigen::Matrix<local_scalar_t__, -1, 1> xi;
      xi = Eigen::Matrix<local_scalar_t__, -1, 1>(xi_1dim__);
      stan::math::fill(xi, DUMMY_VAR__);
      
      Eigen::Matrix<local_scalar_t__, -1, 1> p;
      p = Eigen::Matrix<local_scalar_t__, -1, 1>(N);
      stan::math::fill(p, DUMMY_VAR__);
      
      current_statement__ = 15;
      tau_sq = (tau_base_sq * tau_scale_sq);
      current_statement__ = 16;
      assign(lambda_sq, nil_index_list(),
        elt_multiply(lambda_base_sq, lambda_scale_sq),
        "assigning variable lambda_sq");
      current_statement__ = 19;
      for (int i = 1; i <= L; ++i) {
        current_statement__ = 17;
        assign(theta, cons_list(index_uni(i), nil_index_list()),
          (1 /
            stan::math::sqrt(
              ((1 / ((tau0_sq * tau_sq) * lambda_sq[(i - 1)])) + (1 / c_sq)))),
          "assigning variable theta");}
      current_statement__ = 20;
      assign(alpha, nil_index_list(), elt_multiply(alpha_base, theta),
        "assigning variable alpha");
      current_statement__ = 21;
      denominator = ((sum(elt_multiply(alpha, W)) + 1) + gamma);
      current_statement__ = 22;
      assign(cumsum_alphaW, nil_index_list(),
        cumulative_sum(elt_multiply(alpha, W)),
        "assigning variable cumsum_alphaW");
      current_statement__ = 27;
      for (int i = 1; i <= N; ++i) {
        current_statement__ = 25;
        if (logical_eq(J[(i - 1)], 1)) {
          current_statement__ = 24;
          assign(p, cons_list(index_uni(i), nil_index_list()),
            (((X[(i - 1)] * alpha[(1 - 1)]) + 1) / denominator),
            "assigning variable p");
        } else {
          current_statement__ = 23;
          assign(p, cons_list(index_uni(i), nil_index_list()),
            (((cumsum_alphaW[((J[(i - 1)] - 1) - 1)] +
                ((X[(i - 1)] - nodes[((J[(i - 1)] - 1) - 1)]) *
                  alpha[(J[(i - 1)] - 1)])) + 1) / denominator),
            "assigning variable p");
        }}
      current_statement__ = 28;
      assign(xi, cons_list(index_uni(1), nil_index_list()),
        (1 / denominator), "assigning variable xi");
      current_statement__ = 31;
      for (int i = 2; i <= (L + 1); ++i) {
        current_statement__ = 29;
        assign(xi, cons_list(index_uni(i), nil_index_list()),
          ((cumsum_alphaW[((i - 1) - 1)] + 1) / denominator),
          "assigning variable xi");}
      current_statement__ = 7;
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        current_statement__ = 7;
        current_statement__ = 7;
        check_greater_or_equal(function__, "alpha[sym1__]",
                               alpha[(sym1__ - 1)], 0.0);}
      current_statement__ = 8;
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        current_statement__ = 8;
        current_statement__ = 8;
        check_greater_or_equal(function__, "cumsum_alphaW[sym1__]",
                               cumsum_alphaW[(sym1__ - 1)], 0.0);}
      current_statement__ = 9;
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        current_statement__ = 9;
        current_statement__ = 9;
        check_greater_or_equal(function__, "theta[sym1__]",
                               theta[(sym1__ - 1)], 0.0);}
      current_statement__ = 10;
      current_statement__ = 10;
      check_greater_or_equal(function__, "tau_sq", tau_sq, 0.0);
      current_statement__ = 11;
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        current_statement__ = 11;
        current_statement__ = 11;
        check_greater_or_equal(function__, "lambda_sq[sym1__]",
                               lambda_sq[(sym1__ - 1)], 0.0);}
      current_statement__ = 12;
      current_statement__ = 12;
      check_greater_or_equal(function__, "denominator", denominator, 0.0);
      current_statement__ = 13;
      for (int sym1__ = 1; sym1__ <= xi_1dim__; ++sym1__) {
        current_statement__ = 13;
        current_statement__ = 13;
        check_greater_or_equal(function__, "xi[sym1__]", xi[(sym1__ - 1)],
                               0.0);}
      current_statement__ = 13;
      for (int sym1__ = 1; sym1__ <= xi_1dim__; ++sym1__) {
        current_statement__ = 13;
        current_statement__ = 13;
        check_less_or_equal(function__, "xi[sym1__]", xi[(sym1__ - 1)], 1.0);
      }
      current_statement__ = 14;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 14;
        current_statement__ = 14;
        check_greater_or_equal(function__, "p[sym1__]", p[(sym1__ - 1)], 0.0);
      }
      current_statement__ = 14;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 14;
        current_statement__ = 14;
        check_less_or_equal(function__, "p[sym1__]", p[(sym1__ - 1)], 1.0);}
      {
        current_statement__ = 32;
        lp_accum__.add(normal_lpdf<propto__>(alpha_base, 0.0, 1.0));
        current_statement__ = 33;
        lp_accum__.add(chi_square_lpdf<propto__>(tau_base_sq, 1.0));
        current_statement__ = 34;
        lp_accum__.add(
          inv_gamma_lpdf<propto__>(tau_scale_sq, (global_dof_stan / 2.0),
            (global_dof_stan / 2.0)));
        current_statement__ = 35;
        lp_accum__.add(chi_square_lpdf<propto__>(lambda_base_sq, 1.0));
        current_statement__ = 36;
        lp_accum__.add(
          inv_gamma_lpdf<propto__>(lambda_scale_sq, (local_dof_stan / 2.0),
            (local_dof_stan / 2.0)));
        current_statement__ = 39;
        for (int i = 1; i <= N; ++i) {
          current_statement__ = 37;
          lp_accum__.add(bernoulli_lpmf<propto__>(Y[(i - 1)], p[(i - 1)]));}
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr>
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "model_RegHSfix_namespace::write_array";
(void) function__;  // suppress unused var warning
    (void) function__;  // suppress unused var warning
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<double, -1, 1> alpha_base;
      alpha_base = Eigen::Matrix<double, -1, 1>(L);
      stan::math::fill(alpha_base, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      alpha_base = in__.vector(L);
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        current_statement__ = 1;
        assign(alpha_base, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(alpha_base[(sym1__ - 1)], 0.0),
          "assigning variable alpha_base");}
      double tau_base_sq;
      tau_base_sq = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      tau_base_sq = in__.scalar();
      current_statement__ = 2;
      tau_base_sq = stan::math::lb_constrain(tau_base_sq, 0.0);
      double tau_scale_sq;
      tau_scale_sq = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      tau_scale_sq = in__.scalar();
      current_statement__ = 3;
      tau_scale_sq = stan::math::lb_constrain(tau_scale_sq, 0.0);
      Eigen::Matrix<double, -1, 1> lambda_base_sq;
      lambda_base_sq = Eigen::Matrix<double, -1, 1>(L);
      stan::math::fill(lambda_base_sq, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 4;
      lambda_base_sq = in__.vector(L);
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        current_statement__ = 4;
        assign(lambda_base_sq,
          cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(lambda_base_sq[(sym1__ - 1)], 0.0),
          "assigning variable lambda_base_sq");}
      Eigen::Matrix<double, -1, 1> lambda_scale_sq;
      lambda_scale_sq = Eigen::Matrix<double, -1, 1>(L);
      stan::math::fill(lambda_scale_sq, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 5;
      lambda_scale_sq = in__.vector(L);
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        current_statement__ = 5;
        assign(lambda_scale_sq,
          cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(lambda_scale_sq[(sym1__ - 1)], 0.0),
          "assigning variable lambda_scale_sq");}
      double gamma;
      gamma = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 6;
      gamma = in__.scalar();
      current_statement__ = 6;
      gamma = stan::math::lb_constrain(gamma, 0.0);
      Eigen::Matrix<double, -1, 1> alpha;
      alpha = Eigen::Matrix<double, -1, 1>(L);
      stan::math::fill(alpha, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> cumsum_alphaW;
      cumsum_alphaW = Eigen::Matrix<double, -1, 1>(L);
      stan::math::fill(cumsum_alphaW, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> theta;
      theta = Eigen::Matrix<double, -1, 1>(L);
      stan::math::fill(theta, std::numeric_limits<double>::quiet_NaN());
      
      double tau_sq;
      tau_sq = std::numeric_limits<double>::quiet_NaN();
      
      Eigen::Matrix<double, -1, 1> lambda_sq;
      lambda_sq = Eigen::Matrix<double, -1, 1>(L);
      stan::math::fill(lambda_sq, std::numeric_limits<double>::quiet_NaN());
      
      double denominator;
      denominator = std::numeric_limits<double>::quiet_NaN();
      
      Eigen::Matrix<double, -1, 1> xi;
      xi = Eigen::Matrix<double, -1, 1>(xi_1dim__);
      stan::math::fill(xi, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> p;
      p = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(p, std::numeric_limits<double>::quiet_NaN());
      
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        vars__.emplace_back(alpha_base[(sym1__ - 1)]);}
      vars__.emplace_back(tau_base_sq);
      vars__.emplace_back(tau_scale_sq);
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        vars__.emplace_back(lambda_base_sq[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        vars__.emplace_back(lambda_scale_sq[(sym1__ - 1)]);}
      vars__.emplace_back(gamma);
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 15;
      tau_sq = (tau_base_sq * tau_scale_sq);
      current_statement__ = 16;
      assign(lambda_sq, nil_index_list(),
        elt_multiply(lambda_base_sq, lambda_scale_sq),
        "assigning variable lambda_sq");
      current_statement__ = 19;
      for (int i = 1; i <= L; ++i) {
        current_statement__ = 17;
        assign(theta, cons_list(index_uni(i), nil_index_list()),
          (1 /
            stan::math::sqrt(
              ((1 / ((tau0_sq * tau_sq) * lambda_sq[(i - 1)])) + (1 / c_sq)))),
          "assigning variable theta");}
      current_statement__ = 20;
      assign(alpha, nil_index_list(), elt_multiply(alpha_base, theta),
        "assigning variable alpha");
      current_statement__ = 21;
      denominator = ((sum(elt_multiply(alpha, W)) + 1) + gamma);
      current_statement__ = 22;
      assign(cumsum_alphaW, nil_index_list(),
        cumulative_sum(elt_multiply(alpha, W)),
        "assigning variable cumsum_alphaW");
      current_statement__ = 27;
      for (int i = 1; i <= N; ++i) {
        current_statement__ = 25;
        if (logical_eq(J[(i - 1)], 1)) {
          current_statement__ = 24;
          assign(p, cons_list(index_uni(i), nil_index_list()),
            (((X[(i - 1)] * alpha[(1 - 1)]) + 1) / denominator),
            "assigning variable p");
        } else {
          current_statement__ = 23;
          assign(p, cons_list(index_uni(i), nil_index_list()),
            (((cumsum_alphaW[((J[(i - 1)] - 1) - 1)] +
                ((X[(i - 1)] - nodes[((J[(i - 1)] - 1) - 1)]) *
                  alpha[(J[(i - 1)] - 1)])) + 1) / denominator),
            "assigning variable p");
        }}
      current_statement__ = 28;
      assign(xi, cons_list(index_uni(1), nil_index_list()),
        (1 / denominator), "assigning variable xi");
      current_statement__ = 31;
      for (int i = 2; i <= (L + 1); ++i) {
        current_statement__ = 29;
        assign(xi, cons_list(index_uni(i), nil_index_list()),
          ((cumsum_alphaW[((i - 1) - 1)] + 1) / denominator),
          "assigning variable xi");}
      current_statement__ = 7;
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        current_statement__ = 7;
        current_statement__ = 7;
        check_greater_or_equal(function__, "alpha[sym1__]",
                               alpha[(sym1__ - 1)], 0.0);}
      current_statement__ = 8;
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        current_statement__ = 8;
        current_statement__ = 8;
        check_greater_or_equal(function__, "cumsum_alphaW[sym1__]",
                               cumsum_alphaW[(sym1__ - 1)], 0.0);}
      current_statement__ = 9;
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        current_statement__ = 9;
        current_statement__ = 9;
        check_greater_or_equal(function__, "theta[sym1__]",
                               theta[(sym1__ - 1)], 0.0);}
      current_statement__ = 10;
      current_statement__ = 10;
      check_greater_or_equal(function__, "tau_sq", tau_sq, 0.0);
      current_statement__ = 11;
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        current_statement__ = 11;
        current_statement__ = 11;
        check_greater_or_equal(function__, "lambda_sq[sym1__]",
                               lambda_sq[(sym1__ - 1)], 0.0);}
      current_statement__ = 12;
      current_statement__ = 12;
      check_greater_or_equal(function__, "denominator", denominator, 0.0);
      current_statement__ = 13;
      for (int sym1__ = 1; sym1__ <= xi_1dim__; ++sym1__) {
        current_statement__ = 13;
        current_statement__ = 13;
        check_greater_or_equal(function__, "xi[sym1__]", xi[(sym1__ - 1)],
                               0.0);}
      current_statement__ = 13;
      for (int sym1__ = 1; sym1__ <= xi_1dim__; ++sym1__) {
        current_statement__ = 13;
        current_statement__ = 13;
        check_less_or_equal(function__, "xi[sym1__]", xi[(sym1__ - 1)], 1.0);
      }
      current_statement__ = 14;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 14;
        current_statement__ = 14;
        check_greater_or_equal(function__, "p[sym1__]", p[(sym1__ - 1)], 0.0);
      }
      current_statement__ = 14;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 14;
        current_statement__ = 14;
        check_less_or_equal(function__, "p[sym1__]", p[(sym1__ - 1)], 1.0);}
      if (emit_transformed_parameters__) {
        for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
          vars__.emplace_back(alpha[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
          vars__.emplace_back(cumsum_alphaW[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
          vars__.emplace_back(theta[(sym1__ - 1)]);}
        vars__.emplace_back(tau_sq);
        for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
          vars__.emplace_back(lambda_sq[(sym1__ - 1)]);}
        vars__.emplace_back(denominator);
        for (int sym1__ = 1; sym1__ <= xi_1dim__; ++sym1__) {
          vars__.emplace_back(xi[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          vars__.emplace_back(p[(sym1__ - 1)]);}
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, stan::require_std_vector_t<VecVar>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      Eigen::Matrix<double, -1, 1> alpha_base;
      alpha_base = Eigen::Matrix<double, -1, 1>(L);
      stan::math::fill(alpha_base, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> alpha_base_flat__;
        current_statement__ = 1;
        assign(alpha_base_flat__, nil_index_list(),
          context__.vals_r("alpha_base"),
          "assigning variable alpha_base_flat__");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
          current_statement__ = 1;
          assign(alpha_base, cons_list(index_uni(sym1__), nil_index_list()),
            alpha_base_flat__[(pos__ - 1)], "assigning variable alpha_base");
          current_statement__ = 1;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> alpha_base_free__;
      alpha_base_free__ = Eigen::Matrix<double, -1, 1>(L);
      stan::math::fill(alpha_base_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        current_statement__ = 1;
        assign(alpha_base_free__,
          cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(alpha_base[(sym1__ - 1)], 0.0),
          "assigning variable alpha_base_free__");}
      double tau_base_sq;
      tau_base_sq = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      tau_base_sq = context__.vals_r("tau_base_sq")[(1 - 1)];
      double tau_base_sq_free__;
      tau_base_sq_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      tau_base_sq_free__ = stan::math::lb_free(tau_base_sq, 0.0);
      double tau_scale_sq;
      tau_scale_sq = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      tau_scale_sq = context__.vals_r("tau_scale_sq")[(1 - 1)];
      double tau_scale_sq_free__;
      tau_scale_sq_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      tau_scale_sq_free__ = stan::math::lb_free(tau_scale_sq, 0.0);
      Eigen::Matrix<double, -1, 1> lambda_base_sq;
      lambda_base_sq = Eigen::Matrix<double, -1, 1>(L);
      stan::math::fill(lambda_base_sq, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> lambda_base_sq_flat__;
        current_statement__ = 4;
        assign(lambda_base_sq_flat__, nil_index_list(),
          context__.vals_r("lambda_base_sq"),
          "assigning variable lambda_base_sq_flat__");
        current_statement__ = 4;
        pos__ = 1;
        current_statement__ = 4;
        for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
          current_statement__ = 4;
          assign(lambda_base_sq,
            cons_list(index_uni(sym1__), nil_index_list()),
            lambda_base_sq_flat__[(pos__ - 1)],
            "assigning variable lambda_base_sq");
          current_statement__ = 4;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> lambda_base_sq_free__;
      lambda_base_sq_free__ = Eigen::Matrix<double, -1, 1>(L);
      stan::math::fill(lambda_base_sq_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        current_statement__ = 4;
        assign(lambda_base_sq_free__,
          cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(lambda_base_sq[(sym1__ - 1)], 0.0),
          "assigning variable lambda_base_sq_free__");}
      Eigen::Matrix<double, -1, 1> lambda_scale_sq;
      lambda_scale_sq = Eigen::Matrix<double, -1, 1>(L);
      stan::math::fill(lambda_scale_sq, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> lambda_scale_sq_flat__;
        current_statement__ = 5;
        assign(lambda_scale_sq_flat__, nil_index_list(),
          context__.vals_r("lambda_scale_sq"),
          "assigning variable lambda_scale_sq_flat__");
        current_statement__ = 5;
        pos__ = 1;
        current_statement__ = 5;
        for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
          current_statement__ = 5;
          assign(lambda_scale_sq,
            cons_list(index_uni(sym1__), nil_index_list()),
            lambda_scale_sq_flat__[(pos__ - 1)],
            "assigning variable lambda_scale_sq");
          current_statement__ = 5;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> lambda_scale_sq_free__;
      lambda_scale_sq_free__ = Eigen::Matrix<double, -1, 1>(L);
      stan::math::fill(lambda_scale_sq_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 5;
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        current_statement__ = 5;
        assign(lambda_scale_sq_free__,
          cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(lambda_scale_sq[(sym1__ - 1)], 0.0),
          "assigning variable lambda_scale_sq_free__");}
      double gamma;
      gamma = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 6;
      gamma = context__.vals_r("gamma")[(1 - 1)];
      double gamma_free__;
      gamma_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 6;
      gamma_free__ = stan::math::lb_free(gamma, 0.0);
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        vars__.emplace_back(alpha_base_free__[(sym1__ - 1)]);}
      vars__.emplace_back(tau_base_sq_free__);
      vars__.emplace_back(tau_scale_sq_free__);
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        vars__.emplace_back(lambda_base_sq_free__[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        vars__.emplace_back(lambda_scale_sq_free__[(sym1__ - 1)]);}
      vars__.emplace_back(gamma_free__);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("alpha_base");
    names__.emplace_back("tau_base_sq");
    names__.emplace_back("tau_scale_sq");
    names__.emplace_back("lambda_base_sq");
    names__.emplace_back("lambda_scale_sq");
    names__.emplace_back("gamma");
    names__.emplace_back("alpha");
    names__.emplace_back("cumsum_alphaW");
    names__.emplace_back("theta");
    names__.emplace_back("tau_sq");
    names__.emplace_back("lambda_sq");
    names__.emplace_back("denominator");
    names__.emplace_back("xi");
    names__.emplace_back("p");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(L)});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(L)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(L)});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(L)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(L)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(L)});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(L)});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(xi_1dim__)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N)});
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "alpha_base" + '.' + std::to_string(sym1__));
      }}
    param_names__.emplace_back(std::string() + "tau_base_sq");
    param_names__.emplace_back(std::string() + "tau_scale_sq");
    for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "lambda_base_sq" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "lambda_scale_sq" + '.' + std::to_string(sym1__));
      }}
    param_names__.emplace_back(std::string() + "gamma");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "alpha" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "cumsum_alphaW" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "theta" + '.' + std::to_string(sym1__));
        }}
      param_names__.emplace_back(std::string() + "tau_sq");
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "lambda_sq" + '.' + std::to_string(sym1__));
        }}
      param_names__.emplace_back(std::string() + "denominator");
      for (int sym1__ = 1; sym1__ <= xi_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "xi" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "p" + '.' + std::to_string(sym1__));
        }}
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "alpha_base" + '.' + std::to_string(sym1__));
      }}
    param_names__.emplace_back(std::string() + "tau_base_sq");
    param_names__.emplace_back(std::string() + "tau_scale_sq");
    for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "lambda_base_sq" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "lambda_scale_sq" + '.' + std::to_string(sym1__));
      }}
    param_names__.emplace_back(std::string() + "gamma");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "alpha" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "cumsum_alphaW" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "theta" + '.' + std::to_string(sym1__));
        }}
      param_names__.emplace_back(std::string() + "tau_sq");
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "lambda_sq" + '.' + std::to_string(sym1__));
        }}
      param_names__.emplace_back(std::string() + "denominator");
      for (int sym1__ = 1; sym1__ <= xi_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "xi" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "p" + '.' + std::to_string(sym1__));
        }}
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"alpha_base\",\"type\":{\"name\":\"vector\",\"length\":" << L << "},\"block\":\"parameters\"},{\"name\":\"tau_base_sq\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"tau_scale_sq\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"lambda_base_sq\",\"type\":{\"name\":\"vector\",\"length\":" << L << "},\"block\":\"parameters\"},{\"name\":\"lambda_scale_sq\",\"type\":{\"name\":\"vector\",\"length\":" << L << "},\"block\":\"parameters\"},{\"name\":\"gamma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"vector\",\"length\":" << L << "},\"block\":\"transformed_parameters\"},{\"name\":\"cumsum_alphaW\",\"type\":{\"name\":\"vector\",\"length\":" << L << "},\"block\":\"transformed_parameters\"},{\"name\":\"theta\",\"type\":{\"name\":\"vector\",\"length\":" << L << "},\"block\":\"transformed_parameters\"},{\"name\":\"tau_sq\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"lambda_sq\",\"type\":{\"name\":\"vector\",\"length\":" << L << "},\"block\":\"transformed_parameters\"},{\"name\":\"denominator\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"xi\",\"type\":{\"name\":\"vector\",\"length\":" << xi_1dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"p\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"transformed_parameters\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"alpha_base\",\"type\":{\"name\":\"vector\",\"length\":" << L << "},\"block\":\"parameters\"},{\"name\":\"tau_base_sq\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"tau_scale_sq\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"lambda_base_sq\",\"type\":{\"name\":\"vector\",\"length\":" << L << "},\"block\":\"parameters\"},{\"name\":\"lambda_scale_sq\",\"type\":{\"name\":\"vector\",\"length\":" << L << "},\"block\":\"parameters\"},{\"name\":\"gamma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"vector\",\"length\":" << L << "},\"block\":\"transformed_parameters\"},{\"name\":\"cumsum_alphaW\",\"type\":{\"name\":\"vector\",\"length\":" << L << "},\"block\":\"transformed_parameters\"},{\"name\":\"theta\",\"type\":{\"name\":\"vector\",\"length\":" << L << "},\"block\":\"transformed_parameters\"},{\"name\":\"tau_sq\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"lambda_sq\",\"type\":{\"name\":\"vector\",\"length\":" << L << "},\"block\":\"transformed_parameters\"},{\"name\":\"denominator\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"xi\",\"type\":{\"name\":\"vector\",\"length\":" << xi_1dim__ << "},\"block\":\"transformed_parameters\"},{\"name\":\"p\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"transformed_parameters\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i) {
        vars.coeffRef(i) = vars_vec[i];
      }
    }
    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }
    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
  
    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i) {
        params_r.coeffRef(i) = params_r_vec[i];
      }
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }        
};
}
using stan_model = model_RegHSfix_namespace::model_RegHSfix;
#ifndef USING_R
// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_RegHSfix_namespace::profiles__;
}
#endif
#endif
