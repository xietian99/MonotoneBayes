// Generated by rstantools.  Do not edit by hand.

/*
    MonotoneBayes is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    MonotoneBayes is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with MonotoneBayes.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model_Laplacian_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 58> locations_array__ =
  {" (found before start of program)",
  " (in 'string', line 23, column 2 to column 36)",
  " (in 'string', line 31, column 2 to column 32)",
  " (in 'string', line 32, column 2 to column 33)",
  " (in 'string', line 34, column 2 to column 35)",
  " (in 'string', line 36, column 2 to column 26)",
  " (in 'string', line 40, column 2 to column 31)",
  " (in 'string', line 41, column 2 to column 39)",
  " (in 'string', line 45, column 2 to column 31)",
  " (in 'string', line 46, column 2 to column 27)",
  " (in 'string', line 47, column 2 to column 32)",
  " (in 'string', line 49, column 2 to column 43)",
  " (in 'string', line 51, column 2 to column 40)",
  " (in 'string', line 57, column 2 to column 38)",
  " (in 'string', line 59, column 4 to column 53)",
  " (in 'string', line 58, column 16 to line 60, column 3)",
  " (in 'string', line 58, column 2 to line 60, column 3)",
  " (in 'string', line 61, column 2 to column 30)",
  " (in 'string', line 62, column 2 to column 44)",
  " (in 'string', line 63, column 2 to column 45)",
  " (in 'string', line 68, column 6 to column 93)",
  " (in 'string', line 66, column 6 to column 53)",
  " (in 'string', line 65, column 4 to line 68, column 93)",
  " (in 'string', line 64, column 16 to line 69, column 3)",
  " (in 'string', line 64, column 2 to line 69, column 3)",
  " (in 'string', line 70, column 2 to column 26)",
  " (in 'string', line 72, column 4 to column 52)",
  " (in 'string', line 71, column 20 to line 73, column 3)",
  " (in 'string', line 71, column 2 to line 73, column 3)",
  " (in 'string', line 82, column 2 to column 32)",
  " (in 'string', line 83, column 2 to column 32)",
  " (in 'string', line 84, column 2 to column 69)",
  " (in 'string', line 85, column 2 to column 33)",
  " (in 'string', line 89, column 4 to column 27)",
  " (in 'string', line 88, column 17 to line 90, column 3)",
  " (in 'string', line 88, column 2 to line 90, column 3)",
  " (in 'string', line 5, column 2 to column 17)",
  " (in 'string', line 6, column 2 to column 17)",
  " (in 'string', line 7, column 31 to column 34)",
  " (in 'string', line 7, column 2 to column 42)",
  " (in 'string', line 8, column 31 to column 32)",
  " (in 'string', line 8, column 2 to column 36)",
  " (in 'string', line 9, column 30 to column 31)",
  " (in 'string', line 9, column 2 to column 33)",
  " (in 'string', line 10, column 31 to column 32)",
  " (in 'string', line 10, column 2 to column 36)",
  " (in 'string', line 11, column 30 to column 31)",
  " (in 'string', line 11, column 2 to column 33)",
  " (in 'string', line 15, column 2 to column 35)",
  " (in 'string', line 16, column 2 to column 36)",
  " (in 'string', line 17, column 2 to column 28)",
  " (in 'string', line 23, column 22 to column 23)",
  " (in 'string', line 34, column 22 to column 23)",
  " (in 'string', line 40, column 22 to column 23)",
  " (in 'string', line 41, column 22 to column 23)",
  " (in 'string', line 45, column 22 to column 23)",
  " (in 'string', line 49, column 35 to column 38)",
  " (in 'string', line 51, column 35 to column 36)"};
#include <stan_meta_header.hpp>
class model_Laplacian final : public model_base_crtp<model_Laplacian> {
private:
  int N;
  int L;
  Eigen::Matrix<double,-1,1> nodes_data__;
  Eigen::Matrix<double,-1,1> W_data__;
  std::vector<int> Y;
  Eigen::Matrix<double,-1,1> X_data__;
  std::vector<int> J;
  double local_dof_stan;
  double global_dof_stan;
  double tau0_sq;
  int xi_1dim__;
  Eigen::Map<Eigen::Matrix<double,-1,1>> nodes{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> W{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> X{nullptr, 0};
public:
  ~model_Laplacian() {}
  model_Laplacian(stan::io::var_context& context__, unsigned int
                  random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_Laplacian_namespace::model_Laplacian";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 36;
      context__.validate_dims("data initialization", "N", "int",
        std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      current_statement__ = 36;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 36;
      stan::math::check_greater_or_equal(function__, "N", N, 0);
      current_statement__ = 37;
      context__.validate_dims("data initialization", "L", "int",
        std::vector<size_t>{});
      L = std::numeric_limits<int>::min();
      current_statement__ = 37;
      L = context__.vals_i("L")[(1 - 1)];
      current_statement__ = 37;
      stan::math::check_greater_or_equal(function__, "L", L, 1);
      current_statement__ = 38;
      stan::math::validate_non_negative_index("nodes", "L + 1", (L + 1));
      current_statement__ = 39;
      context__.validate_dims("data initialization", "nodes", "double",
        std::vector<size_t>{static_cast<size_t>((L + 1))});
      nodes_data__ = Eigen::Matrix<double,-1,1>::Constant((L + 1),
                       std::numeric_limits<double>::quiet_NaN());
      new (&nodes)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(nodes_data__.data(), (L + 1));
      {
        std::vector<local_scalar_t__> nodes_flat__;
        current_statement__ = 39;
        nodes_flat__ = context__.vals_r("nodes");
        current_statement__ = 39;
        pos__ = 1;
        current_statement__ = 39;
        for (int sym1__ = 1; sym1__ <= (L + 1); ++sym1__) {
          current_statement__ = 39;
          stan::model::assign(nodes, nodes_flat__[(pos__ - 1)],
            "assigning variable nodes", stan::model::index_uni(sym1__));
          current_statement__ = 39;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 39;
      stan::math::check_greater_or_equal(function__, "nodes", nodes, 0.0);
      current_statement__ = 39;
      stan::math::check_less_or_equal(function__, "nodes", nodes, 1.0);
      current_statement__ = 40;
      stan::math::validate_non_negative_index("W", "L", L);
      current_statement__ = 41;
      context__.validate_dims("data initialization", "W", "double",
        std::vector<size_t>{static_cast<size_t>(L)});
      W_data__ = Eigen::Matrix<double,-1,1>::Constant(L,
                   std::numeric_limits<double>::quiet_NaN());
      new (&W) Eigen::Map<Eigen::Matrix<double,-1,1>>(W_data__.data(), L);
      {
        std::vector<local_scalar_t__> W_flat__;
        current_statement__ = 41;
        W_flat__ = context__.vals_r("W");
        current_statement__ = 41;
        pos__ = 1;
        current_statement__ = 41;
        for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
          current_statement__ = 41;
          stan::model::assign(W, W_flat__[(pos__ - 1)],
            "assigning variable W", stan::model::index_uni(sym1__));
          current_statement__ = 41;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 41;
      stan::math::check_greater_or_equal(function__, "W", W, 0.0);
      current_statement__ = 41;
      stan::math::check_less_or_equal(function__, "W", W, 1.0);
      current_statement__ = 42;
      stan::math::validate_non_negative_index("Y", "N", N);
      current_statement__ = 43;
      context__.validate_dims("data initialization", "Y", "int",
        std::vector<size_t>{static_cast<size_t>(N)});
      Y = std::vector<int>(N, std::numeric_limits<int>::min());
      current_statement__ = 43;
      Y = context__.vals_i("Y");
      current_statement__ = 43;
      stan::math::check_greater_or_equal(function__, "Y", Y, 0);
      current_statement__ = 43;
      stan::math::check_less_or_equal(function__, "Y", Y, 1);
      current_statement__ = 44;
      stan::math::validate_non_negative_index("X", "N", N);
      current_statement__ = 45;
      context__.validate_dims("data initialization", "X", "double",
        std::vector<size_t>{static_cast<size_t>(N)});
      X_data__ = Eigen::Matrix<double,-1,1>::Constant(N,
                   std::numeric_limits<double>::quiet_NaN());
      new (&X) Eigen::Map<Eigen::Matrix<double,-1,1>>(X_data__.data(), N);
      {
        std::vector<local_scalar_t__> X_flat__;
        current_statement__ = 45;
        X_flat__ = context__.vals_r("X");
        current_statement__ = 45;
        pos__ = 1;
        current_statement__ = 45;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 45;
          stan::model::assign(X, X_flat__[(pos__ - 1)],
            "assigning variable X", stan::model::index_uni(sym1__));
          current_statement__ = 45;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 45;
      stan::math::check_greater_or_equal(function__, "X", X, 0.0);
      current_statement__ = 45;
      stan::math::check_less_or_equal(function__, "X", X, 1.0);
      current_statement__ = 46;
      stan::math::validate_non_negative_index("J", "N", N);
      current_statement__ = 47;
      context__.validate_dims("data initialization", "J", "int",
        std::vector<size_t>{static_cast<size_t>(N)});
      J = std::vector<int>(N, std::numeric_limits<int>::min());
      current_statement__ = 47;
      J = context__.vals_i("J");
      current_statement__ = 47;
      stan::math::check_greater_or_equal(function__, "J", J, 1);
      current_statement__ = 47;
      stan::math::check_less_or_equal(function__, "J", J, L);
      current_statement__ = 48;
      context__.validate_dims("data initialization", "local_dof_stan",
        "double", std::vector<size_t>{});
      local_dof_stan = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 48;
      local_dof_stan = context__.vals_r("local_dof_stan")[(1 - 1)];
      current_statement__ = 48;
      stan::math::check_greater_or_equal(function__, "local_dof_stan",
        local_dof_stan, 0.0);
      current_statement__ = 49;
      context__.validate_dims("data initialization", "global_dof_stan",
        "double", std::vector<size_t>{});
      global_dof_stan = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 49;
      global_dof_stan = context__.vals_r("global_dof_stan")[(1 - 1)];
      current_statement__ = 49;
      stan::math::check_greater_or_equal(function__, "global_dof_stan",
        global_dof_stan, 0.0);
      current_statement__ = 50;
      context__.validate_dims("data initialization", "tau0_sq", "double",
        std::vector<size_t>{});
      tau0_sq = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 50;
      tau0_sq = context__.vals_r("tau0_sq")[(1 - 1)];
      current_statement__ = 50;
      stan::math::check_greater_or_equal(function__, "tau0_sq", tau0_sq, 0.0);
      current_statement__ = 51;
      stan::math::validate_non_negative_index("alpha_base", "L", L);
      current_statement__ = 52;
      stan::math::validate_non_negative_index("lambda_sq", "L", L);
      current_statement__ = 53;
      stan::math::validate_non_negative_index("alpha", "L", L);
      current_statement__ = 54;
      stan::math::validate_non_negative_index("cumsum_alphaW", "L", L);
      current_statement__ = 55;
      stan::math::validate_non_negative_index("theta", "L", L);
      current_statement__ = 56;
      xi_1dim__ = std::numeric_limits<int>::min();
      current_statement__ = 56;
      xi_1dim__ = (L + 1);
      current_statement__ = 56;
      stan::math::validate_non_negative_index("xi", "L + 1", xi_1dim__);
      current_statement__ = 57;
      stan::math::validate_non_negative_index("p", "N", N);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = L + 1 + 1 + L + 1;
  }
  inline std::string model_name() const final {
    return "model_Laplacian";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --allow-undefined"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_Laplacian_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<local_scalar_t__,-1,1> alpha_base =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(L, DUMMY_VAR__);
      current_statement__ = 1;
      alpha_base = in__.template read_constrain_lb<
                     Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0.0,
                     lp__, L);
      local_scalar_t__ tau_base_sq = DUMMY_VAR__;
      current_statement__ = 2;
      tau_base_sq = in__.template read_constrain_lb<local_scalar_t__,
                      jacobian__>(0.0, lp__);
      local_scalar_t__ tau_scale_sq = DUMMY_VAR__;
      current_statement__ = 3;
      tau_scale_sq = in__.template read_constrain_lb<local_scalar_t__,
                       jacobian__>(0.0, lp__);
      Eigen::Matrix<local_scalar_t__,-1,1> lambda_sq =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(L, DUMMY_VAR__);
      current_statement__ = 4;
      lambda_sq = in__.template read_constrain_lb<
                    Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0.0,
                    lp__, L);
      local_scalar_t__ gamma = DUMMY_VAR__;
      current_statement__ = 5;
      gamma = in__.template read_constrain_lb<local_scalar_t__,
                jacobian__>(0.0, lp__);
      Eigen::Matrix<local_scalar_t__,-1,1> alpha =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(L, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> cumsum_alphaW =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(L, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> theta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(L, DUMMY_VAR__);
      local_scalar_t__ tau_sq = DUMMY_VAR__;
      local_scalar_t__ denominator = DUMMY_VAR__;
      Eigen::Matrix<local_scalar_t__,-1,1> xi =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(xi_1dim__,
          DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> p =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N, DUMMY_VAR__);
      current_statement__ = 13;
      tau_sq = (tau_base_sq * tau_scale_sq);
      current_statement__ = 16;
      for (int i = 1; i <= L; ++i) {
        current_statement__ = 14;
        stan::model::assign(theta,
          stan::math::sqrt(((tau0_sq * tau_sq) *
            stan::model::rvalue(lambda_sq, "lambda_sq",
              stan::model::index_uni(i)))), "assigning variable theta",
          stan::model::index_uni(i));
      }
      current_statement__ = 17;
      stan::model::assign(alpha, stan::math::elt_multiply(alpha_base, theta),
        "assigning variable alpha");
      current_statement__ = 18;
      denominator = ((stan::math::sum(stan::math::elt_multiply(alpha, W)) +
        1) + gamma);
      current_statement__ = 19;
      stan::model::assign(cumsum_alphaW,
        stan::math::cumulative_sum(stan::math::elt_multiply(alpha, W)),
        "assigning variable cumsum_alphaW");
      current_statement__ = 24;
      for (int i = 1; i <= N; ++i) {
        current_statement__ = 22;
        if (stan::math::logical_eq(
              stan::model::rvalue(J, "J", stan::model::index_uni(i)), 1)) {
          current_statement__ = 21;
          stan::model::assign(p,
            (((stan::model::rvalue(X, "X", stan::model::index_uni(i)) *
            stan::model::rvalue(alpha, "alpha", stan::model::index_uni(1))) +
            1) / denominator), "assigning variable p",
            stan::model::index_uni(i));
        } else {
          current_statement__ = 20;
          stan::model::assign(p,
            (((stan::model::rvalue(cumsum_alphaW, "cumsum_alphaW",
                 stan::model::index_uni(
                   (stan::model::rvalue(J, "J", stan::model::index_uni(i)) -
                   1))) +
            ((stan::model::rvalue(X, "X", stan::model::index_uni(i)) -
            stan::model::rvalue(nodes, "nodes",
              stan::model::index_uni(
                stan::model::rvalue(J, "J", stan::model::index_uni(i))))) *
            stan::model::rvalue(alpha, "alpha",
              stan::model::index_uni(
                stan::model::rvalue(J, "J", stan::model::index_uni(i)))))) +
            1) / denominator), "assigning variable p",
            stan::model::index_uni(i));
        }
      }
      current_statement__ = 25;
      stan::model::assign(xi, (1 / denominator), "assigning variable xi",
        stan::model::index_uni(1));
      current_statement__ = 28;
      for (int i = 2; i <= (L + 1); ++i) {
        current_statement__ = 26;
        stan::model::assign(xi,
          ((stan::model::rvalue(cumsum_alphaW, "cumsum_alphaW",
              stan::model::index_uni((i - 1))) + 1) / denominator),
          "assigning variable xi", stan::model::index_uni(i));
      }
      current_statement__ = 6;
      stan::math::check_greater_or_equal(function__, "alpha", alpha, 0.0);
      current_statement__ = 7;
      stan::math::check_greater_or_equal(function__, "cumsum_alphaW",
        cumsum_alphaW, 0.0);
      current_statement__ = 8;
      stan::math::check_greater_or_equal(function__, "theta", theta, 0.0);
      current_statement__ = 9;
      stan::math::check_greater_or_equal(function__, "tau_sq", tau_sq, 0.0);
      current_statement__ = 10;
      stan::math::check_greater_or_equal(function__, "denominator",
        denominator, 0.0);
      current_statement__ = 11;
      stan::math::check_greater_or_equal(function__, "xi", xi, 0.0);
      current_statement__ = 11;
      stan::math::check_less_or_equal(function__, "xi", xi, 1.0);
      current_statement__ = 12;
      stan::math::check_greater_or_equal(function__, "p", p, 0.0);
      current_statement__ = 12;
      stan::math::check_less_or_equal(function__, "p", p, 1.0);
      {
        current_statement__ = 29;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(alpha_base, 0.0, 1.0));
        current_statement__ = 30;
        lp_accum__.add(stan::math::chi_square_lpdf<propto__>(tau_base_sq, 1.0));
        current_statement__ = 31;
        lp_accum__.add(stan::math::inv_gamma_lpdf<propto__>(tau_scale_sq,
                         (global_dof_stan / 2.0), (global_dof_stan / 2.0)));
        current_statement__ = 32;
        lp_accum__.add(stan::math::exponential_lpdf<propto__>(lambda_sq, (1.0
                         / 2)));
        current_statement__ = 35;
        for (int i = 1; i <= N; ++i) {
          current_statement__ = 33;
          lp_accum__.add(stan::math::bernoulli_lpmf<propto__>(
                           stan::model::rvalue(Y, "Y",
                             stan::model::index_uni(i)),
                           stan::model::rvalue(p, "p",
                             stan::model::index_uni(i))));
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model_Laplacian_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<double,-1,1> alpha_base =
        Eigen::Matrix<double,-1,1>::Constant(L,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 1;
      alpha_base = in__.template read_constrain_lb<
                     Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0.0,
                     lp__, L);
      double tau_base_sq = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 2;
      tau_base_sq = in__.template read_constrain_lb<local_scalar_t__,
                      jacobian__>(0.0, lp__);
      double tau_scale_sq = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 3;
      tau_scale_sq = in__.template read_constrain_lb<local_scalar_t__,
                       jacobian__>(0.0, lp__);
      Eigen::Matrix<double,-1,1> lambda_sq =
        Eigen::Matrix<double,-1,1>::Constant(L,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 4;
      lambda_sq = in__.template read_constrain_lb<
                    Eigen::Matrix<local_scalar_t__,-1,1>, jacobian__>(0.0,
                    lp__, L);
      double gamma = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 5;
      gamma = in__.template read_constrain_lb<local_scalar_t__,
                jacobian__>(0.0, lp__);
      Eigen::Matrix<double,-1,1> alpha =
        Eigen::Matrix<double,-1,1>::Constant(L,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> cumsum_alphaW =
        Eigen::Matrix<double,-1,1>::Constant(L,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> theta =
        Eigen::Matrix<double,-1,1>::Constant(L,
          std::numeric_limits<double>::quiet_NaN());
      double tau_sq = std::numeric_limits<double>::quiet_NaN();
      double denominator = std::numeric_limits<double>::quiet_NaN();
      Eigen::Matrix<double,-1,1> xi =
        Eigen::Matrix<double,-1,1>::Constant(xi_1dim__,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> p =
        Eigen::Matrix<double,-1,1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      out__.write(alpha_base);
      out__.write(tau_base_sq);
      out__.write(tau_scale_sq);
      out__.write(lambda_sq);
      out__.write(gamma);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      current_statement__ = 13;
      tau_sq = (tau_base_sq * tau_scale_sq);
      current_statement__ = 16;
      for (int i = 1; i <= L; ++i) {
        current_statement__ = 14;
        stan::model::assign(theta,
          stan::math::sqrt(((tau0_sq * tau_sq) *
            stan::model::rvalue(lambda_sq, "lambda_sq",
              stan::model::index_uni(i)))), "assigning variable theta",
          stan::model::index_uni(i));
      }
      current_statement__ = 17;
      stan::model::assign(alpha, stan::math::elt_multiply(alpha_base, theta),
        "assigning variable alpha");
      current_statement__ = 18;
      denominator = ((stan::math::sum(stan::math::elt_multiply(alpha, W)) +
        1) + gamma);
      current_statement__ = 19;
      stan::model::assign(cumsum_alphaW,
        stan::math::cumulative_sum(stan::math::elt_multiply(alpha, W)),
        "assigning variable cumsum_alphaW");
      current_statement__ = 24;
      for (int i = 1; i <= N; ++i) {
        current_statement__ = 22;
        if (stan::math::logical_eq(
              stan::model::rvalue(J, "J", stan::model::index_uni(i)), 1)) {
          current_statement__ = 21;
          stan::model::assign(p,
            (((stan::model::rvalue(X, "X", stan::model::index_uni(i)) *
            stan::model::rvalue(alpha, "alpha", stan::model::index_uni(1))) +
            1) / denominator), "assigning variable p",
            stan::model::index_uni(i));
        } else {
          current_statement__ = 20;
          stan::model::assign(p,
            (((stan::model::rvalue(cumsum_alphaW, "cumsum_alphaW",
                 stan::model::index_uni(
                   (stan::model::rvalue(J, "J", stan::model::index_uni(i)) -
                   1))) +
            ((stan::model::rvalue(X, "X", stan::model::index_uni(i)) -
            stan::model::rvalue(nodes, "nodes",
              stan::model::index_uni(
                stan::model::rvalue(J, "J", stan::model::index_uni(i))))) *
            stan::model::rvalue(alpha, "alpha",
              stan::model::index_uni(
                stan::model::rvalue(J, "J", stan::model::index_uni(i)))))) +
            1) / denominator), "assigning variable p",
            stan::model::index_uni(i));
        }
      }
      current_statement__ = 25;
      stan::model::assign(xi, (1 / denominator), "assigning variable xi",
        stan::model::index_uni(1));
      current_statement__ = 28;
      for (int i = 2; i <= (L + 1); ++i) {
        current_statement__ = 26;
        stan::model::assign(xi,
          ((stan::model::rvalue(cumsum_alphaW, "cumsum_alphaW",
              stan::model::index_uni((i - 1))) + 1) / denominator),
          "assigning variable xi", stan::model::index_uni(i));
      }
      current_statement__ = 6;
      stan::math::check_greater_or_equal(function__, "alpha", alpha, 0.0);
      current_statement__ = 7;
      stan::math::check_greater_or_equal(function__, "cumsum_alphaW",
        cumsum_alphaW, 0.0);
      current_statement__ = 8;
      stan::math::check_greater_or_equal(function__, "theta", theta, 0.0);
      current_statement__ = 9;
      stan::math::check_greater_or_equal(function__, "tau_sq", tau_sq, 0.0);
      current_statement__ = 10;
      stan::math::check_greater_or_equal(function__, "denominator",
        denominator, 0.0);
      current_statement__ = 11;
      stan::math::check_greater_or_equal(function__, "xi", xi, 0.0);
      current_statement__ = 11;
      stan::math::check_less_or_equal(function__, "xi", xi, 1.0);
      current_statement__ = 12;
      stan::math::check_greater_or_equal(function__, "p", p, 0.0);
      current_statement__ = 12;
      stan::math::check_less_or_equal(function__, "p", p, 1.0);
      if (emit_transformed_parameters__) {
        out__.write(alpha);
        out__.write(cumsum_alphaW);
        out__.write(theta);
        out__.write(tau_sq);
        out__.write(denominator);
        out__.write(xi);
        out__.write(p);
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> alpha_base =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(L, DUMMY_VAR__);
      current_statement__ = 1;
      stan::model::assign(alpha_base,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(L),
        "assigning variable alpha_base");
      out__.write_free_lb(0.0, alpha_base);
      local_scalar_t__ tau_base_sq = DUMMY_VAR__;
      current_statement__ = 2;
      tau_base_sq = in__.read<local_scalar_t__>();
      out__.write_free_lb(0.0, tau_base_sq);
      local_scalar_t__ tau_scale_sq = DUMMY_VAR__;
      current_statement__ = 3;
      tau_scale_sq = in__.read<local_scalar_t__>();
      out__.write_free_lb(0.0, tau_scale_sq);
      Eigen::Matrix<local_scalar_t__,-1,1> lambda_sq =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(L, DUMMY_VAR__);
      current_statement__ = 4;
      stan::model::assign(lambda_sq,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(L),
        "assigning variable lambda_sq");
      out__.write_free_lb(0.0, lambda_sq);
      local_scalar_t__ gamma = DUMMY_VAR__;
      current_statement__ = 5;
      gamma = in__.read<local_scalar_t__>();
      out__.write_free_lb(0.0, gamma);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "alpha_base",
        "double", std::vector<size_t>{static_cast<size_t>(L)});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "tau_base_sq",
        "double", std::vector<size_t>{});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "tau_scale_sq",
        "double", std::vector<size_t>{});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization", "lambda_sq",
        "double", std::vector<size_t>{static_cast<size_t>(L)});
      current_statement__ = 5;
      context__.validate_dims("parameter initialization", "gamma", "double",
        std::vector<size_t>{});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> alpha_base =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(L, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> alpha_base_flat__;
        current_statement__ = 1;
        alpha_base_flat__ = context__.vals_r("alpha_base");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
          current_statement__ = 1;
          stan::model::assign(alpha_base, alpha_base_flat__[(pos__ - 1)],
            "assigning variable alpha_base", stan::model::index_uni(sym1__));
          current_statement__ = 1;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lb(0.0, alpha_base);
      local_scalar_t__ tau_base_sq = DUMMY_VAR__;
      current_statement__ = 2;
      tau_base_sq = context__.vals_r("tau_base_sq")[(1 - 1)];
      out__.write_free_lb(0.0, tau_base_sq);
      local_scalar_t__ tau_scale_sq = DUMMY_VAR__;
      current_statement__ = 3;
      tau_scale_sq = context__.vals_r("tau_scale_sq")[(1 - 1)];
      out__.write_free_lb(0.0, tau_scale_sq);
      Eigen::Matrix<local_scalar_t__,-1,1> lambda_sq =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(L, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> lambda_sq_flat__;
        current_statement__ = 4;
        lambda_sq_flat__ = context__.vals_r("lambda_sq");
        current_statement__ = 4;
        pos__ = 1;
        current_statement__ = 4;
        for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
          current_statement__ = 4;
          stan::model::assign(lambda_sq, lambda_sq_flat__[(pos__ - 1)],
            "assigning variable lambda_sq", stan::model::index_uni(sym1__));
          current_statement__ = 4;
          pos__ = (pos__ + 1);
        }
      }
      out__.write_free_lb(0.0, lambda_sq);
      local_scalar_t__ gamma = DUMMY_VAR__;
      current_statement__ = 5;
      gamma = context__.vals_r("gamma")[(1 - 1)];
      out__.write_free_lb(0.0, gamma);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"alpha_base", "tau_base_sq",
                "tau_scale_sq", "lambda_sq", "gamma"};
    if (emit_transformed_parameters__) {
      std::vector<std::string>
        temp{"alpha", "cumsum_alphaW", "theta", "tau_sq", "denominator",
             "xi", "p"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{static_cast<
                                                                    size_t>(L)},
                std::vector<size_t>{}, std::vector<size_t>{},
                std::vector<size_t>{static_cast<size_t>(L)},
                std::vector<size_t>{}};
    if (emit_transformed_parameters__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(L)},
             std::vector<size_t>{static_cast<size_t>(L)},
             std::vector<size_t>{static_cast<size_t>(L)},
             std::vector<size_t>{}, std::vector<size_t>{},
             std::vector<size_t>{static_cast<size_t>(xi_1dim__)},
             std::vector<size_t>{static_cast<size_t>(N)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
      param_names__.emplace_back(std::string() + "alpha_base" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "tau_base_sq");
    param_names__.emplace_back(std::string() + "tau_scale_sq");
    for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
      param_names__.emplace_back(std::string() + "lambda_sq" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "gamma");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        param_names__.emplace_back(std::string() + "alpha" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        param_names__.emplace_back(std::string() + "cumsum_alphaW" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        param_names__.emplace_back(std::string() + "theta" + '.' +
          std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "tau_sq");
      param_names__.emplace_back(std::string() + "denominator");
      for (int sym1__ = 1; sym1__ <= xi_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "xi" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "p" + '.' +
          std::to_string(sym1__));
      }
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
      param_names__.emplace_back(std::string() + "alpha_base" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "tau_base_sq");
    param_names__.emplace_back(std::string() + "tau_scale_sq");
    for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
      param_names__.emplace_back(std::string() + "lambda_sq" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "gamma");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        param_names__.emplace_back(std::string() + "alpha" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        param_names__.emplace_back(std::string() + "cumsum_alphaW" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= L; ++sym1__) {
        param_names__.emplace_back(std::string() + "theta" + '.' +
          std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "tau_sq");
      param_names__.emplace_back(std::string() + "denominator");
      for (int sym1__ = 1; sym1__ <= xi_1dim__; ++sym1__) {
        param_names__.emplace_back(std::string() + "xi" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "p" + '.' +
          std::to_string(sym1__));
      }
    }
    if (emit_generated_quantities__) {}
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"alpha_base\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(L) + "},\"block\":\"parameters\"},{\"name\":\"tau_base_sq\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"tau_scale_sq\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"lambda_sq\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(L) + "},\"block\":\"parameters\"},{\"name\":\"gamma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(L) + "},\"block\":\"transformed_parameters\"},{\"name\":\"cumsum_alphaW\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(L) + "},\"block\":\"transformed_parameters\"},{\"name\":\"theta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(L) + "},\"block\":\"transformed_parameters\"},{\"name\":\"tau_sq\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"denominator\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"xi\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(xi_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"p\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"alpha_base\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(L) + "},\"block\":\"parameters\"},{\"name\":\"tau_base_sq\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"tau_scale_sq\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"lambda_sq\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(L) + "},\"block\":\"parameters\"},{\"name\":\"gamma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(L) + "},\"block\":\"transformed_parameters\"},{\"name\":\"cumsum_alphaW\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(L) + "},\"block\":\"transformed_parameters\"},{\"name\":\"theta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(L) + "},\"block\":\"transformed_parameters\"},{\"name\":\"tau_sq\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"denominator\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"xi\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(xi_1dim__) + "},\"block\":\"transformed_parameters\"},{\"name\":\"p\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N) + "},\"block\":\"transformed_parameters\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((((L + 1) + 1) + L) + 1);
    const size_t num_transformed = emit_transformed_parameters * (((((((L +
      L) + L) + 1) + 1) + xi_1dim__) + N));
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((((L + 1) + 1) + L) + 1);
    const size_t num_transformed = emit_transformed_parameters * (((((((L +
      L) + L) + 1) + 1) + xi_1dim__) + N));
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_Laplacian_namespace::model_Laplacian;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_Laplacian_namespace::profiles__;
}
#endif
#endif
